<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="actors.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="1664"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="movies" custom_title="0" dock_id="1" table="4,6:mainmovies"/><dock_state state="000000ff00000000fd00000001000000020000053500000390fc0100000001fb000000160064006f0063006b00420072006f00770073006500310100000000000005350000012e00ffffff000002790000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="actors" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="61"/><column index="2" value="71"/><column index="3" value="119"/><column index="4" value="35"/><column index="5" value="55"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="actors_movies" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="109"/><column index="2" value="66"/><column index="3" value="61"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="bank_accounts" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="111"/><column index="2" value="70"/><column index="3" value="61"/><column index="4" value="104"/><column index="5" value="49"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="directors" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="70"/><column index="2" value="95"/><column index="3" value="87"/><column index="4" value="35"/><column index="5" value="35"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="movies" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort><column index="5" mode="0"/></sort><column_widths><column index="1" value="60"/><column index="2" value="271"/><column index="3" value="50"/><column index="4" value="79"/><column index="5" value="70"/><column index="6" value="59"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1*">-- 2.	Добавить новое поле finance INTEGER в таблицу bank_accounts значение задать NULL.
ALTER TABLE bank_accounts
ADD COLUMN finance INTEGER DEFAULT NULL;

-- 3.	Вывести первых 10  режиссёров, которые сняли самые высокобюджетные фильмы. Режиссёры не должны повторяться.
SELECT DISTINCT directors.name, directors.surname
FROM directors
INNER JOIN movies USING(director_id)
WHERE budjet &lt;= 200000000
ORDER BY budjet DESC LIMIT 10;

-- 4.	Вывести актёров и режиссёров, которые не участвовали не в одном из фильмов.
SELECT name, surname 
FROM directors
EXCEPT
SELECT directors.name, directors.surname 
FROM directors
INNER JOIN movies USING(director_id)

UNION

SELECT name, surname 
FROM actors
EXCEPT
SELECT actors.name, actors.surname 
FROM actors
INNER JOIN actors_movies USING(actors_id);

-- 5.	Вывести все фильмы, а также всех актёров кассовые сборы которых превысили 150000000.
SELECT movies.name_movie, actors.name, actors.surname
FROM movies
INNER JOIN actors_movies ON movies_id = movie_id
INNER JOIN actors USING(actors_id)
WHERE budjet &gt; 150000000;

-- 6.	Вывести всех режиссёров которые снимали фильмы до 2000 года. Режиссёры не должны повторятся
SELECT DISTINCT directors.name, directors.surname
FROM directors
INNER JOIN movies USING(director_id)
WHERE release &lt; 2000;

-- 7.	Добавить фильмы для актёров и режиссёров, у которых нет зависимости в таблице movies. Не забыть сделать изменения в таблице actors_movies.
INSERT INTO actors ('name', 'surname', age, 'sex')
VALUES 
('Matt', 'Damon', 54, 'male'),
('Jessica', 'Chastain', 47, 'female');
UPDATE actors_movies 
SET actors_id = 15
WHERE actors_movies_id = 23;
UPDATE actors_movies 
SET actors_id = 16
WHERE actors_movies_id = 24;
UPDATE movies 
SET director_id = (
		SELECT actors.actors_id
		FROM actors
		WHERE actors.name = 'Tom' AND actors.surname = 'Hanks'
		)
		WHERE movies.name_movie = 'Larry Crowne' AND movies.director_id IS NULL
-- 8.	Добавить колонку rating к фильмам. Задать значения рейтинга фильмов. 
ALTER TABLE movies
ADD COLUMN rating INTEGER;

-- 9.	Вывести режиссёров и фильмы с рейтингом ниже среднего до 2000 года
SELECT directors.name, directors.surname, movies.name_movie, movies.release, movies.rating
FROM directors
INNER JOIN movies USING(director_id)
WHERE rating &lt; (SELECT avg(rating) FROM movies) AND release &lt; 2000;



</sql><current_tab id="0"/></tab_sql></sqlb_project>
